generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model for user authentication
model User {
  id                     String          @id @default(cuid())
  username               String          @unique
  password               String
  posts                  Post[]
  profile                Profile?
  Comment                Comment[]
  Like                   Like[]
  commentreply           Commentreply[]
  sentFriendRequests     FriendRequest[] @relation("sender")
  receivedFriendRequests FriendRequest[] @relation("recipient")
  friends                User[]          @relation("Friendship")
  friendOf               User[]          @relation("Friendship")
  sentMessages           Message[]       @relation("SentMessages")
  receivedMessages       Message[]       @relation("ReceivedMessages")
  notifications          Notification[]  @relation("user")
}

// Profile model for user profiles
model Profile {
  id             String   @id @default(cuid())
  firstName      String
  lastName       String
  phoneNumber    String
  username       String   @unique
  email          String   @unique
  profilePicture String?
  bio            String
  interests      String[]
  connectWith    String[]
  updates        String[]
  userExperience String
  certificates   String
  challenges     String
  placeOfWork    String
  userRole       String[]
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  // Define a relation to the User model for user profiles.
  user           User     @relation(fields: [username], references: [username])
}

model Comment {
  id           String         @id @default(cuid())
  text         String
  post         Post           @relation(fields: [postId], references: [id])
  postId       String
  user         User           @relation(fields: [userId], references: [id])
  userId       String
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  commentreply Commentreply[]
}

model Like {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  post      Post     @relation(fields: [postId], references: [id])
  postId    String
  likes     Int      @default(0)
  createdAt DateTime @default(now())

  @@unique([userId, postId]) // Add a unique constraint on userId and postId
}

model Commentreply {
  id            String         @id @default(cuid())
  text          String
  user          User           @relation(fields: [userId], references: [id])
  userId        String
  comment       Comment        @relation(fields: [commentId], references: [id])
  commentId     String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  // Add this field to support replies to replies
  parentReply   Commentreply?  @relation("ChildReplies", fields: [parentReplyId], references: [id])
  parentReplyId String?
  childReplies  Commentreply[] @relation("ChildReplies")
}

// Post model for user posts
model Post {
  id        String    @id @default(cuid())
  title     String
  content   String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  // Define a relation to the User model for the post author.
  user      User      @relation(fields: [userId], references: [id])
  userId    String
  // Define a relation to the Tag model for categorizing posts.
  tag       Tag       @relation(fields: [tagId], references: [id])
  tagId     String
  media     String?
  Comment   Comment[]
  Like      Like[]
}

// Tag model for categorizing posts
model Tag {
  id    String @id @default(cuid())
  name  String @unique
  // Define a relation to the Post model for tags associated with posts.
  posts Post[]
}

model FriendRequest {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  sender      User     @relation("sender", fields: [senderId], references: [id])
  senderId    String
  recipient   User     @relation("recipient", fields: [recipientId], references: [id])
  recipientId String
}

// Define the Message model
model Message {
  id          String   @id @default(cuid())
  content     String?
  media       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  sender      User     @relation("SentMessages", fields: [senderId], references: [id])
  senderId    String
  recipient   User     @relation("ReceivedMessages", fields: [recipientId], references: [id])
  recipientId String
}

// Define the Notification model
model Notification {
  id        String   @id @default(cuid())
  type      String // e.g., 'friend_request', 'friend_request_accepted', etc.
  userId    String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation("user", fields: [userId], references: [id])
}
